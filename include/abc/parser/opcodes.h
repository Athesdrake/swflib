#pragma once

namespace swf::abc::parser {
enum class OP : uint8_t {
    bkpt           = 0x01,
    nop            = 0x02,
    OP_throw       = 0x03,
    getsuper       = 0x04,
    setsuper       = 0x05,
    dxns           = 0x06,
    dxnslate       = 0x07,
    kill           = 0x08,
    label          = 0x09,
    lf32x4         = 0x0A,
    sf32x4         = 0x0B,
    ifnlt          = 0x0C,
    ifnle          = 0x0D,
    ifngt          = 0x0E,
    ifnge          = 0x0F,
    jump           = 0x10,
    iftrue         = 0x11,
    iffalse        = 0x12,
    ifeq           = 0x13,
    ifne           = 0x14,
    iflt           = 0x15,
    ifle           = 0x16,
    ifgt           = 0x17,
    ifge           = 0x18,
    ifstricteq     = 0x19,
    ifstrictne     = 0x1A,
    lookupswitch   = 0x1B,
    pushwith       = 0x1C,
    popscope       = 0x1D,
    nextname       = 0x1E,
    hasnext        = 0x1F,
    pushnull       = 0x20,
    pushundefined  = 0x21,
    pushfloat      = 0x22,
    nextvalue      = 0x23,
    pushbyte       = 0x24,
    pushshort      = 0x25,
    pushtrue       = 0x26,
    pushfalse      = 0x27,
    pushnan        = 0x28,
    pop            = 0x29,
    dup            = 0x2A,
    swap           = 0x2B,
    pushstring     = 0x2C,
    pushint        = 0x2D,
    pushuint       = 0x2E,
    pushdouble     = 0x2F,
    pushscope      = 0x30,
    pushnamespace  = 0x31,
    hasnext2       = 0x32,
    li8            = 0x35,
    li16           = 0x36,
    li32           = 0x37,
    lf32           = 0x38,
    lf64           = 0x39,
    si8            = 0x3A,
    si16           = 0x3B,
    si32           = 0x3C,
    sf32           = 0x3D,
    sf64           = 0x3E,
    newfunction    = 0x40,
    call           = 0x41,
    construct      = 0x42,
    callmethod     = 0x43,
    callstatic     = 0x44,
    callsuper      = 0x45,
    callproperty   = 0x46,
    returnvoid     = 0x47,
    returnvalue    = 0x48,
    constructsuper = 0x49,
    constructprop  = 0x4A,
    callproplex    = 0x4C,
    callsupervoid  = 0x4E,
    callpropvoid   = 0x4F,
    sxi1           = 0x50,
    sxi8           = 0x51,
    sxi16          = 0x52,
    applytype      = 0x53,
    pushfloat4     = 0x54,
    newobject      = 0x55,
    newarray       = 0x56,
    newactivation  = 0x57,
    newclass       = 0x58,
    getdescendants = 0x59,
    newcatch       = 0x5A,
    findpropstrict = 0x5D,
    findproperty   = 0x5E,
    finddef        = 0x5F,
    getlex         = 0x60,
    setproperty    = 0x61,
    getlocal       = 0x62,
    setlocal       = 0x63,
    getglobalscope = 0x64,
    getscopeobject = 0x65,
    getproperty    = 0x66,
    getouterscope  = 0x67,
    initproperty   = 0x68,
    deleteproperty = 0x6A,
    getslot        = 0x6C,
    setslot        = 0x6D,
    getglobalslot  = 0x6E,
    setglobalslot  = 0x6F,
    convert_s      = 0x70,
    esc_xelem      = 0x71,
    esc_xattr      = 0x72,
    convert_i      = 0x73,
    convert_u      = 0x74,
    convert_d      = 0x75,
    convert_b      = 0x76,
    convert_o      = 0x77,
    checkfilter    = 0x78,
    convert_f      = 0x79,
    unplus         = 0x7A,
    convert_f4     = 0x7B,
    coerce         = 0x80,
    coerce_b       = 0x81,
    coerce_a       = 0x82,
    coerce_i       = 0x83,
    coerce_d       = 0x84,
    coerce_s       = 0x85,
    astype         = 0x86,
    astypelate     = 0x87,
    coerce_u       = 0x88,
    coerce_o       = 0x89,
    negate         = 0x90,
    increment      = 0x91,
    inclocal       = 0x92,
    decrement      = 0x93,
    declocal       = 0x94,
    OP_typeof      = 0x95,
    OP_not         = 0x96,
    bitnot         = 0x97,
    add            = 0xA0,
    subtract       = 0xA1,
    multiply       = 0xA2,
    divide         = 0xA3,
    modulo         = 0xA4,
    lshift         = 0xA5,
    rshift         = 0xA6,
    urshift        = 0xA7,
    OP_bitand      = 0xA8,
    OP_bitor       = 0xA9,
    bitxor         = 0xAA,
    equals         = 0xAB,
    strictequals   = 0xAC,
    lessthan       = 0xAD,
    lessequals     = 0xAE,
    greaterthan    = 0xAF,
    greaterequals  = 0xB0,
    OP_instanceof  = 0xB1,
    istype         = 0xB2,
    istypelate     = 0xB3,
    in             = 0xB4,
    increment_i    = 0xC0,
    decrement_i    = 0xC1,
    inclocal_i     = 0xC2,
    declocal_i     = 0xC3,
    negate_i       = 0xC4,
    add_i          = 0xC5,
    subtract_i     = 0xC6,
    multiply_i     = 0xC7,
    getlocal0      = 0xD0,
    getlocal1      = 0xD1,
    getlocal2      = 0xD2,
    getlocal3      = 0xD3,
    setlocal0      = 0xD4,
    setlocal1      = 0xD5,
    setlocal2      = 0xD6,
    setlocal3      = 0xD7,
    debug          = 0xEF,
    debugline      = 0xF0,
    debugfile      = 0xF1,
    bkptline       = 0xF2
};

constexpr const char* opnames[256] = { "unknown_00", "bkpt", "nop", "throw", "getsuper", "setsuper", "dxns", "dxnslate",
    "kill", "label", "lf32x4", "sf32x4", "ifnlt", "ifnle", "ifngt", "ifnge", "jump", "iftrue", "iffalse", "ifeq",
    "ifne", "iflt", "ifle", "ifgt", "ifge", "ifstricteq", "ifstrictne", "lookupswitch", "pushwith", "popscope",
    "nextname", "hasnext", "pushnull", "pushundefined", "pushfloat", "nextvalue", "pushbyte", "pushshort", "pushtrue",
    "pushfalse", "pushnan", "pop", "dup", "swap", "pushstring", "pushint", "pushuint", "pushdouble", "pushscope",
    "pushnamespace", "hasnext2", "unknown_33", "unknown_34", "li8", "li16", "li32", "lf32", "lf64", "si8", "si16",
    "si32", "sf32", "sf64", "unknown_3F", "newfunction", "call", "construct", "callmethod", "callstatic", "callsuper",
    "callproperty", "returnvoid", "returnvalue", "constructsuper", "constructprop", "unknown_4B", "callproplex",
    "unknown_4D", "callsupervoid", "callpropvoid", "sxi1", "sxi8", "sxi16", "applytype", "pushfloat4", "newobject",
    "newarray", "newactivation", "newclass", "getdescendants", "newcatch", "unknown_5B", "unknown_5C", "findpropstrict",
    "findproperty", "finddef", "getlex", "setproperty", "getlocal", "setlocal", "getglobalscope", "getscopeobject",
    "getproperty", "getouterscope", "initproperty", "unknown_69", "deleteproperty", "unknown_6B", "getslot", "setslot",
    "getglobalslot", "setglobalslot", "convert_s", "esc_xelem", "esc_xattr", "convert_i", "convert_u", "convert_d",
    "convert_b", "convert_o", "checkfilter", "convert_f", "unplus", "convert_f4", "unknown_7C", "unknown_7D",
    "unknown_7E", "unknown_7F", "coerce", "coerce_b", "coerce_a", "coerce_i", "coerce_d", "coerce_s", "astype",
    "astypelate", "coerce_u", "coerce_o", "unknown_8A", "unknown_8B", "unknown_8C", "unknown_8D", "unknown_8E",
    "unknown_8F", "negate", "increment", "inclocal", "decrement", "declocal", "typeof", "not", "bitnot", "unknown_98",
    "unknown_99", "unknown_9A", "unknown_9B", "unknown_9C", "unknown_9D", "unknown_9E", "unknown_9F", "add", "subtract",
    "multiply", "divide", "modulo", "lshift", "rshift", "urshift", "bitand", "bitor", "bitxor", "equals",
    "strictequals", "lessthan", "lessequals", "greaterthan", "greaterequals", "instanceof", "istype", "istypelate",
    "in", "unknown_B5", "unknown_B6", "unknown_B7", "unknown_B8", "unknown_B9", "unknown_BA", "unknown_BB",
    "unknown_BC", "unknown_BD", "unknown_BE", "unknown_BF", "increment_i", "decrement_i", "inclocal_i", "declocal_i",
    "negate_i", "add_i", "subtract_i", "multiply_i", "unknown_C8", "unknown_C9", "unknown_CA", "unknown_CB",
    "unknown_CC", "unknown_CD", "unknown_CE", "unknown_CF", "getlocal0", "getlocal1", "getlocal2", "getlocal3",
    "setlocal0", "setlocal1", "setlocal2", "setlocal3", "unknown_D8", "unknown_D9", "unknown_DA", "unknown_DB",
    "unknown_DC", "unknown_DD", "unknown_DE", "unknown_DF", "unknown_E0", "unknown_E1", "unknown_E2", "unknown_E3",
    "unknown_E4", "unknown_E5", "unknown_E6", "unknown_E7", "unknown_E8", "unknown_E9", "unknown_EA", "unknown_EB",
    "unknown_EC", "unknown_ED", "unknown_EE", "debug", "debugline", "debugfile", "bkptline", "unknown_F3", "unknown_F4",
    "unknown_F5", "unknown_F6", "unknown_F7", "unknown_F8", "unknown_F9", "unknown_FA", "unknown_FB", "unknown_FC",
    "unknown_FD", "unknown_FE", "unknown_FF" };
}